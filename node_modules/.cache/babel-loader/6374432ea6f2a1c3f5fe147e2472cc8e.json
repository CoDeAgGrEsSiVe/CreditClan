{"ast":null,"code":"var _jsxFileName = \"/Users/user/Downloads/react-todo-app-master/src/components/TodoList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport { BsCheck } from \"react-icons/bs\";\nimport { VscChromeClose } from \"react-icons/vsc\";\nimport { TodosContext } from \"./context/TodosContext\";\nimport TodosRemaining from \"./TodosRemaining\";\nimport TodosClearCompleted from \"./TodosClearCompleted\";\nimport TodosCheckAll from \"./TodosCheckAll\";\nimport TodoFilters from \"./TodoFilters\";\nimport { StyledList } from \"./styled/List.styled\";\nimport { StyledControllers } from \"./styled/Controllers.styled\";\nimport { StyledFiltersContainer } from \"./styled/FiltersContainer.styled\"; // function TodoList() {\n//   const { todos, setTodos, filter } = useContext(TodosContext);\n//   const handleDrag = (result) => {\n//     const { source, destination } = result;\n//     if (!destination) return;\n//     if (destination.index === source.index\n//         && destination.droppableId === source.droppableId) return;\n//     setList(List => reorder(List, source.index, destination.index));\n// }\n// const reorder = (list, sourceIndex, destinationIndex) => {\n//     const result = [...list];\n//     const [removed] = result.splice(sourceIndex, 1);\n//     result.splice(destinationIndex, 0, removed);\n//     return result;\n// }\n//   const completeTodo = (id) => {\n//     const updatedTodos = todos.map((todo) => {\n//       if (todo.id === id) {\n//         todo.isComplete = !todo.isComplete;\n//       }\n//       return todo;\n//     });\n//     setTodos(updatedTodos);\n//   };\n//   const updateTodo = (event, id) => {\n//     const updatedTodos = todos.map((todo) => {\n//       if (event.target.value.trim().length === 0) {\n//         todo.isEditing = false;\n//         return todo;\n//       }\n//       if (todo.id === id) {\n//         todo.title = event.target.value;\n//         todo.isEditing = false;\n//       }\n//       return todo;\n//     });\n//     setTodos(updatedTodos);\n//   };\n//   const markAsEditing = (id) => {\n//     const updatedTodos = todos.map((todo) => {\n//       if (todo.id === id) {\n//         todo.isEditing = true;\n//       }\n//       return todo;\n//     });\n//     setTodos(updatedTodos);\n//   };\n//   const cancelEditing = (id) => {\n//     const updatedTodos = todos.map((todo) => {\n//       if (todo.id === id) {\n//         todo.isEditing = false;\n//       }\n//       return todo;\n//     });\n//     setTodos(updatedTodos);\n//   };\n//   const deleteTodo = (id) => {\n//     setTodos([...todos].filter((todo) => todo.id !== id));\n//   };\n//   const todosFiltered = (filter) => {\n//     if (filter === \"all\") {\n//       return todos;\n//     } else if (filter === \"active\") {\n//       return todos.filter((todo) => !todo.isComplete);\n//     } else if (filter === \"completed\") {\n//       return todos.filter((todo) => todo.isComplete);\n//     }\n//   };\n//   return (\n//     <>\n//       <StyledList>\n//         {todosFiltered(filter).map((todo) => (\n//           <li key={todo.id}>\n//             <div>\n//               <input\n//                 type=\"checkbox\"\n//                 onChange={() => completeTodo(todo.id)}\n//                 checked={todo.isComplete ? true : false}\n//               />\n//               {!todo.isEditing ? (\n//                 <span\n//                   onDoubleClick={() => markAsEditing(todo.id)}\n//                   className={todo.isComplete ? \"line-through\" : \"\"}\n//                 >\n//                   {todo.title}\n//                 </span>\n//               ) : (\n//                 <input\n//                   type=\"text\"\n//                   className=\"todo-item-input\"\n//                   defaultValue={todo.title}\n//                   onBlur={(event) => updateTodo(event, todo.id)}\n//                   onKeyDown={(event) => {\n//                     if (event.key === \"Enter\") {\n//                       updateTodo(event, todo.id);\n//                     } else if (event.key === \"Escape\") {\n//                       cancelEditing(todo.id);\n//                     }\n//                   }}\n//                   autoFocus\n//                 />\n//               )}\n//             </div>\n//             <a href=\"/#\" onClick={() => deleteTodo(todo.id)}>\n//               <img src=\"./images/icon-cross.svg\" alt=\"icon-cross\" />\n//             </a>\n//           </li>\n//         ))}\n//         <StyledControllers>\n//           <TodosRemaining />\n//           <TodosCheckAll />\n//           <TodosClearCompleted />\n//         </StyledControllers>\n//         <StyledFiltersContainer>\n//           <TodoFilters />\n//         </StyledFiltersContainer>\n//       </StyledList>\n//     </>\n//   );\n// }\n// export default TodoList;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst List = _ref => {\n  _s();\n\n  let {\n    list\n  } = _ref;\n  const [List, setList] = useState(null);\n  const [Completed, setCompleted] = useState([]);\n  useEffect(() => {\n    setList(list);\n  }, [list]);\n\n  const handleDrag = result => {\n    const {\n      source,\n      destination\n    } = result;\n    if (!destination) return;\n    if (destination.index === source.index && destination.droppableId === source.droppableId) return;\n    setList(List => reorder(List, source.index, destination.index));\n  };\n\n  const reorder = (list, sourceIndex, destinationIndex) => {\n    const result = [...list];\n    const [removed] = result.splice(sourceIndex, 1);\n    result.splice(destinationIndex, 0, removed);\n    return result;\n  };\n\n  const updateCompleted = async e => {\n    const taskRef = doc(store, \"tasks\", e.target.id);\n    await updateDoc(taskRef, {\n      completed: e.target.checked\n    });\n  };\n\n  const deleteTask = id => {\n    deleteDoc(doc(store, \"tasks\", id));\n  };\n\n  return List ? /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: result => handleDrag(result),\n    children: /*#__PURE__*/_jsxDEV(Droppable, {\n      droppableId: \"task\",\n      children: droppableProvider => /*#__PURE__*/_jsxDEV(\"div\", { ...droppableProvider.droppableProps,\n        ref: droppableProvider.innerRef,\n        className: \"list-task\",\n        children: [List.map((task, id) => /*#__PURE__*/_jsxDEV(Draggable, {\n          draggableId: task.index.toString(),\n          index: id,\n          children: draggableProvider => /*#__PURE__*/_jsxDEV(\"div\", { ...draggableProvider.draggableProps,\n            ref: draggableProvider.innerRef,\n            ...draggableProvider.dragHandleProps,\n            className: \"task-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: task.id,\n              defaultChecked: task.completed,\n              onChange: updateCompleted\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 43\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: task.id,\n              children: [/*#__PURE__*/_jsxDEV(BsCheck, {\n                className: \"icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 47\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: task.task\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 47\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 43\n            }, this), /*#__PURE__*/_jsxDEV(VscChromeClose, {\n              className: \"icon-close\",\n              onClick: () => deleteTask(task.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 43\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 39\n          }, this)\n        }, task.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 31\n        }, this)), droppableProvider.placeholder]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 20\n      }, this)\n    }, List.lenght, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 15\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 11\n  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 13\n  }, this);\n};\n\n_s(List, \"JfKIXo3bZ3tq68OnP1yuYQzht1s=\");\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["React","useContext","BsCheck","VscChromeClose","TodosContext","TodosRemaining","TodosClearCompleted","TodosCheckAll","TodoFilters","StyledList","StyledControllers","StyledFiltersContainer","List","list","setList","useState","Completed","setCompleted","useEffect","handleDrag","result","source","destination","index","droppableId","reorder","sourceIndex","destinationIndex","removed","splice","updateCompleted","e","taskRef","doc","store","target","id","updateDoc","completed","checked","deleteTask","deleteDoc","droppableProvider","droppableProps","innerRef","map","task","toString","draggableProvider","draggableProps","dragHandleProps","placeholder","lenght"],"sources":["/Users/user/Downloads/react-todo-app-master/src/components/TodoList.jsx"],"sourcesContent":["import React, { useContext} from \"react\";\nimport { BsCheck } from \"react-icons/bs\";\nimport { VscChromeClose } from \"react-icons/vsc\";\nimport { TodosContext } from \"./context/TodosContext\";\nimport TodosRemaining from \"./TodosRemaining\";\nimport TodosClearCompleted from \"./TodosClearCompleted\";\nimport TodosCheckAll from \"./TodosCheckAll\";\nimport TodoFilters from \"./TodoFilters\";\nimport { StyledList } from \"./styled/List.styled\";\nimport { StyledControllers } from \"./styled/Controllers.styled\";\nimport { StyledFiltersContainer } from \"./styled/FiltersContainer.styled\";\n\n// function TodoList() {\n//   const { todos, setTodos, filter } = useContext(TodosContext);\n \n  \n//   const handleDrag = (result) => {\n//     const { source, destination } = result;\n//     if (!destination) return;\n//     if (destination.index === source.index\n//         && destination.droppableId === source.droppableId) return;\n//     setList(List => reorder(List, source.index, destination.index));\n// }\n\n// const reorder = (list, sourceIndex, destinationIndex) => {\n//     const result = [...list];\n//     const [removed] = result.splice(sourceIndex, 1);\n//     result.splice(destinationIndex, 0, removed);\n//     return result;\n// }\n\n\n//   const completeTodo = (id) => {\n//     const updatedTodos = todos.map((todo) => {\n//       if (todo.id === id) {\n//         todo.isComplete = !todo.isComplete;\n//       }\n//       return todo;\n//     });\n\n//     setTodos(updatedTodos);\n//   };\n\n//   const updateTodo = (event, id) => {\n//     const updatedTodos = todos.map((todo) => {\n//       if (event.target.value.trim().length === 0) {\n//         todo.isEditing = false;\n//         return todo;\n//       }\n//       if (todo.id === id) {\n//         todo.title = event.target.value;\n//         todo.isEditing = false;\n//       }\n//       return todo;\n//     });\n\n//     setTodos(updatedTodos);\n//   };\n\n//   const markAsEditing = (id) => {\n//     const updatedTodos = todos.map((todo) => {\n//       if (todo.id === id) {\n//         todo.isEditing = true;\n//       }\n//       return todo;\n//     });\n\n//     setTodos(updatedTodos);\n//   };\n\n//   const cancelEditing = (id) => {\n//     const updatedTodos = todos.map((todo) => {\n//       if (todo.id === id) {\n//         todo.isEditing = false;\n//       }\n//       return todo;\n//     });\n\n//     setTodos(updatedTodos);\n//   };\n\n//   const deleteTodo = (id) => {\n//     setTodos([...todos].filter((todo) => todo.id !== id));\n//   };\n\n//   const todosFiltered = (filter) => {\n//     if (filter === \"all\") {\n//       return todos;\n//     } else if (filter === \"active\") {\n//       return todos.filter((todo) => !todo.isComplete);\n//     } else if (filter === \"completed\") {\n//       return todos.filter((todo) => todo.isComplete);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <StyledList>\n//         {todosFiltered(filter).map((todo) => (\n//           <li key={todo.id}>\n//             <div>\n//               <input\n//                 type=\"checkbox\"\n//                 onChange={() => completeTodo(todo.id)}\n//                 checked={todo.isComplete ? true : false}\n//               />\n//               {!todo.isEditing ? (\n//                 <span\n//                   onDoubleClick={() => markAsEditing(todo.id)}\n//                   className={todo.isComplete ? \"line-through\" : \"\"}\n//                 >\n//                   {todo.title}\n//                 </span>\n//               ) : (\n//                 <input\n//                   type=\"text\"\n//                   className=\"todo-item-input\"\n//                   defaultValue={todo.title}\n//                   onBlur={(event) => updateTodo(event, todo.id)}\n//                   onKeyDown={(event) => {\n//                     if (event.key === \"Enter\") {\n//                       updateTodo(event, todo.id);\n//                     } else if (event.key === \"Escape\") {\n//                       cancelEditing(todo.id);\n//                     }\n//                   }}\n//                   autoFocus\n//                 />\n//               )}\n//             </div>\n//             <a href=\"/#\" onClick={() => deleteTodo(todo.id)}>\n//               <img src=\"./images/icon-cross.svg\" alt=\"icon-cross\" />\n//             </a>\n//           </li>\n//         ))}\n\n//         <StyledControllers>\n//           <TodosRemaining />\n//           <TodosCheckAll />\n//           <TodosClearCompleted />\n//         </StyledControllers>\n\n//         <StyledFiltersContainer>\n//           <TodoFilters />\n//         </StyledFiltersContainer>\n//       </StyledList>\n//     </>\n//   );\n// }\n\n// export default TodoList;\n\n\n\nconst List = ({ list }) => {\n  const [List, setList] = useState(null);\n  const [Completed, setCompleted] = useState([]);\n  \n  useEffect(() => {\n      setList(list);\n  }, [list]);\n\n  const handleDrag = (result) => {\n      const { source, destination } = result;\n      if (!destination) return;\n      if (destination.index === source.index\n          && destination.droppableId === source.droppableId) return;\n      setList(List => reorder(List, source.index, destination.index));\n  }\n\n  const reorder = (list, sourceIndex, destinationIndex) => {\n      const result = [...list];\n      const [removed] = result.splice(sourceIndex, 1);\n      result.splice(destinationIndex, 0, removed);\n      return result;\n  }\n\n  const updateCompleted = async (e) => {\n      const taskRef = doc(store, \"tasks\", e.target.id);\n      await updateDoc(taskRef, {completed: e.target.checked});\n  }\n\n  const deleteTask = (id) => {\n      deleteDoc(doc(store, \"tasks\", id));\n  }\n\n  return (\n      List ?\n          <DragDropContext onDragEnd={(result => handleDrag(result))}>\n              <Droppable droppableId=\"task\" key={List.lenght}>\n                  {(droppableProvider) =>\n                  (<div\n                      {...droppableProvider.droppableProps}\n                      ref={droppableProvider.innerRef}\n                      className=\"list-task\">\n                      {\n                          List.map((task, id) => (\n                              <Draggable\n                                  draggableId={task.index.toString()}\n                                  index={id}\n                                  key={task.id}>\n                                  {(draggableProvider) => (\n                                      <div\n                                          {...draggableProvider.draggableProps}\n                                          ref={draggableProvider.innerRef}\n                                          {...draggableProvider.dragHandleProps}\n                                          className=\"task-item\">\n                                          <input\n                                              type=\"checkbox\"\n                                              id={task.id}\n                                              defaultChecked={task.completed}\n                                              onChange={updateCompleted} />\n                                          <label htmlFor={task.id}>\n                                              <BsCheck className=\"icon\" />\n                                              <span>{task.task}</span>\n                                          </label>\n                                          <VscChromeClose \n                                          className=\"icon-close\"\n                                          onClick={() => deleteTask(task.id)} />\n                                      </div>\n                                  )}\n                              </Draggable>\n                          ))\n                      }\n                      {droppableProvider.placeholder}\n                  </div>)\n                  }\n              </Droppable>\n          </DragDropContext>\n          : <span>Loading...</span>\n  )\n}\n\nexport default List;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,iBAAT,QAAkC,6BAAlC;AACA,SAASC,sBAAT,QAAuC,kCAAvC,C,CAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA,MAAMC,IAAI,GAAG,QAAc;EAAA;;EAAA,IAAb;IAAEC;EAAF,CAAa;EACzB,MAAM,CAACD,IAAD,EAAOE,OAAP,IAAkBC,QAAQ,CAAC,IAAD,CAAhC;EACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BF,QAAQ,CAAC,EAAD,CAA1C;EAEAG,SAAS,CAAC,MAAM;IACZJ,OAAO,CAACD,IAAD,CAAP;EACH,CAFQ,EAEN,CAACA,IAAD,C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"},"metadata":{},"sourceType":"module"}