{"ast":null,"code":"import React, { useContext } from \"react\";\nimport { TodosContext } from \"./context/TodosContext\";\nimport TodosRemaining from \"./TodosRemaining\";\nimport TodosClearCompleted from \"./TodosClearCompleted\";\nimport TodosCheckAll from \"./TodosCheckAll\";\nimport TodoFilters from \"./TodoFilters\";\nimport { StyledList } from \"./styled/List.styled\";\nimport { StyledControllers } from \"./styled/Controllers.styled\";\nimport { StyledFiltersContainer } from \"./styled/FiltersContainer.styled\"; // function TodoList() {\n//   const { todos, setTodos, filter } = useContext(TodosContext);\n//   const handleDrag = (result) => {\n//     const { source, destination } = result;\n//     if (!destination) return;\n//     if (destination.index === source.index\n//         && destination.droppableId === source.droppableId) return;\n//     setList(List => reorder(List, source.index, destination.index));\n// }\n// const reorder = (list, sourceIndex, destinationIndex) => {\n//     const result = [...list];\n//     const [removed] = result.splice(sourceIndex, 1);\n//     result.splice(destinationIndex, 0, removed);\n//     return result;\n// }\n//   const completeTodo = (id) => {\n//     const updatedTodos = todos.map((todo) => {\n//       if (todo.id === id) {\n//         todo.isComplete = !todo.isComplete;\n//       }\n//       return todo;\n//     });\n//     setTodos(updatedTodos);\n//   };\n//   const updateTodo = (event, id) => {\n//     const updatedTodos = todos.map((todo) => {\n//       if (event.target.value.trim().length === 0) {\n//         todo.isEditing = false;\n//         return todo;\n//       }\n//       if (todo.id === id) {\n//         todo.title = event.target.value;\n//         todo.isEditing = false;\n//       }\n//       return todo;\n//     });\n//     setTodos(updatedTodos);\n//   };\n//   const markAsEditing = (id) => {\n//     const updatedTodos = todos.map((todo) => {\n//       if (todo.id === id) {\n//         todo.isEditing = true;\n//       }\n//       return todo;\n//     });\n//     setTodos(updatedTodos);\n//   };\n//   const cancelEditing = (id) => {\n//     const updatedTodos = todos.map((todo) => {\n//       if (todo.id === id) {\n//         todo.isEditing = false;\n//       }\n//       return todo;\n//     });\n//     setTodos(updatedTodos);\n//   };\n//   const deleteTodo = (id) => {\n//     setTodos([...todos].filter((todo) => todo.id !== id));\n//   };\n//   const todosFiltered = (filter) => {\n//     if (filter === \"all\") {\n//       return todos;\n//     } else if (filter === \"active\") {\n//       return todos.filter((todo) => !todo.isComplete);\n//     } else if (filter === \"completed\") {\n//       return todos.filter((todo) => todo.isComplete);\n//     }\n//   };\n//   return (\n//     <>\n//       <StyledList>\n//         {todosFiltered(filter).map((todo) => (\n//           <li key={todo.id}>\n//             <div>\n//               <input\n//                 type=\"checkbox\"\n//                 onChange={() => completeTodo(todo.id)}\n//                 checked={todo.isComplete ? true : false}\n//               />\n//               {!todo.isEditing ? (\n//                 <span\n//                   onDoubleClick={() => markAsEditing(todo.id)}\n//                   className={todo.isComplete ? \"line-through\" : \"\"}\n//                 >\n//                   {todo.title}\n//                 </span>\n//               ) : (\n//                 <input\n//                   type=\"text\"\n//                   className=\"todo-item-input\"\n//                   defaultValue={todo.title}\n//                   onBlur={(event) => updateTodo(event, todo.id)}\n//                   onKeyDown={(event) => {\n//                     if (event.key === \"Enter\") {\n//                       updateTodo(event, todo.id);\n//                     } else if (event.key === \"Escape\") {\n//                       cancelEditing(todo.id);\n//                     }\n//                   }}\n//                   autoFocus\n//                 />\n//               )}\n//             </div>\n//             <a href=\"/#\" onClick={() => deleteTodo(todo.id)}>\n//               <img src=\"./images/icon-cross.svg\" alt=\"icon-cross\" />\n//             </a>\n//           </li>\n//         ))}\n//         <StyledControllers>\n//           <TodosRemaining />\n//           <TodosCheckAll />\n//           <TodosClearCompleted />\n//         </StyledControllers>\n//         <StyledFiltersContainer>\n//           <TodoFilters />\n//         </StyledFiltersContainer>\n//       </StyledList>\n//     </>\n//   );\n// }\n// export default TodoList;","map":{"version":3,"names":["React","useContext","TodosContext","TodosRemaining","TodosClearCompleted","TodosCheckAll","TodoFilters","StyledList","StyledControllers","StyledFiltersContainer"],"sources":["/Users/user/Downloads/react-todo-app-master/src/components/TodoList.jsx"],"sourcesContent":["import React, { useContext} from \"react\";\nimport { TodosContext } from \"./context/TodosContext\";\nimport TodosRemaining from \"./TodosRemaining\";\nimport TodosClearCompleted from \"./TodosClearCompleted\";\nimport TodosCheckAll from \"./TodosCheckAll\";\nimport TodoFilters from \"./TodoFilters\";\nimport { StyledList } from \"./styled/List.styled\";\nimport { StyledControllers } from \"./styled/Controllers.styled\";\nimport { StyledFiltersContainer } from \"./styled/FiltersContainer.styled\";\n\n// function TodoList() {\n//   const { todos, setTodos, filter } = useContext(TodosContext);\n \n  \n//   const handleDrag = (result) => {\n//     const { source, destination } = result;\n//     if (!destination) return;\n//     if (destination.index === source.index\n//         && destination.droppableId === source.droppableId) return;\n//     setList(List => reorder(List, source.index, destination.index));\n// }\n\n// const reorder = (list, sourceIndex, destinationIndex) => {\n//     const result = [...list];\n//     const [removed] = result.splice(sourceIndex, 1);\n//     result.splice(destinationIndex, 0, removed);\n//     return result;\n// }\n\n\n//   const completeTodo = (id) => {\n//     const updatedTodos = todos.map((todo) => {\n//       if (todo.id === id) {\n//         todo.isComplete = !todo.isComplete;\n//       }\n//       return todo;\n//     });\n\n//     setTodos(updatedTodos);\n//   };\n\n//   const updateTodo = (event, id) => {\n//     const updatedTodos = todos.map((todo) => {\n//       if (event.target.value.trim().length === 0) {\n//         todo.isEditing = false;\n//         return todo;\n//       }\n//       if (todo.id === id) {\n//         todo.title = event.target.value;\n//         todo.isEditing = false;\n//       }\n//       return todo;\n//     });\n\n//     setTodos(updatedTodos);\n//   };\n\n//   const markAsEditing = (id) => {\n//     const updatedTodos = todos.map((todo) => {\n//       if (todo.id === id) {\n//         todo.isEditing = true;\n//       }\n//       return todo;\n//     });\n\n//     setTodos(updatedTodos);\n//   };\n\n//   const cancelEditing = (id) => {\n//     const updatedTodos = todos.map((todo) => {\n//       if (todo.id === id) {\n//         todo.isEditing = false;\n//       }\n//       return todo;\n//     });\n\n//     setTodos(updatedTodos);\n//   };\n\n//   const deleteTodo = (id) => {\n//     setTodos([...todos].filter((todo) => todo.id !== id));\n//   };\n\n//   const todosFiltered = (filter) => {\n//     if (filter === \"all\") {\n//       return todos;\n//     } else if (filter === \"active\") {\n//       return todos.filter((todo) => !todo.isComplete);\n//     } else if (filter === \"completed\") {\n//       return todos.filter((todo) => todo.isComplete);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <StyledList>\n//         {todosFiltered(filter).map((todo) => (\n//           <li key={todo.id}>\n//             <div>\n//               <input\n//                 type=\"checkbox\"\n//                 onChange={() => completeTodo(todo.id)}\n//                 checked={todo.isComplete ? true : false}\n//               />\n//               {!todo.isEditing ? (\n//                 <span\n//                   onDoubleClick={() => markAsEditing(todo.id)}\n//                   className={todo.isComplete ? \"line-through\" : \"\"}\n//                 >\n//                   {todo.title}\n//                 </span>\n//               ) : (\n//                 <input\n//                   type=\"text\"\n//                   className=\"todo-item-input\"\n//                   defaultValue={todo.title}\n//                   onBlur={(event) => updateTodo(event, todo.id)}\n//                   onKeyDown={(event) => {\n//                     if (event.key === \"Enter\") {\n//                       updateTodo(event, todo.id);\n//                     } else if (event.key === \"Escape\") {\n//                       cancelEditing(todo.id);\n//                     }\n//                   }}\n//                   autoFocus\n//                 />\n//               )}\n//             </div>\n//             <a href=\"/#\" onClick={() => deleteTodo(todo.id)}>\n//               <img src=\"./images/icon-cross.svg\" alt=\"icon-cross\" />\n//             </a>\n//           </li>\n//         ))}\n\n//         <StyledControllers>\n//           <TodosRemaining />\n//           <TodosCheckAll />\n//           <TodosClearCompleted />\n//         </StyledControllers>\n\n//         <StyledFiltersContainer>\n//           <TodoFilters />\n//         </StyledFiltersContainer>\n//       </StyledList>\n//     </>\n//   );\n// }\n\n// export default TodoList;\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAiC,OAAjC;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,iBAAT,QAAkC,6BAAlC;AACA,SAASC,sBAAT,QAAuC,kCAAv},"metadata":{},"sourceType":"module"}