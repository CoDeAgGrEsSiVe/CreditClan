{"ast":null,"code":"var _jsxFileName = \"/Users/user/Downloads/react-todo-app-master/src/components/TodoList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst List = _ref => {\n  _s();\n\n  let {\n    list\n  } = _ref;\n  const [List, setList] = useState(null);\n  const [Completed, setCompleted] = useState([]);\n  useEffect(() => {\n    setList(list);\n  }, [list]);\n\n  const handleDrag = result => {\n    const {\n      source,\n      destination\n    } = result;\n    if (!destination) return;\n    if (destination.index === source.index && destination.droppableId === source.droppableId) return;\n    setList(List => reorder(List, source.index, destination.index));\n  };\n\n  const reorder = (list, sourceIndex, destinationIndex) => {\n    const result = [...list];\n    const [removed] = result.splice(sourceIndex, 1);\n    result.splice(destinationIndex, 0, removed);\n    return result;\n  };\n\n  const updateCompleted = async e => {\n    const taskRef = doc(store, \"tasks\", e.target.id);\n    await updateDoc(taskRef, {\n      completed: e.target.checked\n    });\n  };\n\n  const deleteTask = id => {\n    deleteDoc(doc(store, \"tasks\", id));\n  };\n\n  return List ? /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: result => handleDrag(result),\n    children: /*#__PURE__*/_jsxDEV(Droppable, {\n      droppableId: \"task\",\n      children: droppableProvider => /*#__PURE__*/_jsxDEV(\"div\", { ...droppableProvider.droppableProps,\n        ref: droppableProvider.innerRef,\n        className: \"list-task\",\n        children: [List.map((task, id) => /*#__PURE__*/_jsxDEV(Draggable, {\n          draggableId: task.index.toString(),\n          index: id,\n          children: draggableProvider => /*#__PURE__*/_jsxDEV(\"div\", { ...draggableProvider.draggableProps,\n            ref: draggableProvider.innerRef,\n            ...draggableProvider.dragHandleProps,\n            className: \"task-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: task.id,\n              defaultChecked: task.completed,\n              onChange: updateCompleted\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: task.id,\n              children: [/*#__PURE__*/_jsxDEV(BsCheck, {\n                className: \"icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: task.task\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(VscChromeClose, {\n              className: \"icon-close\",\n              onClick: () => deleteTask(task.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 41\n          }, this)\n        }, task.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 33\n        }, this)), droppableProvider.placeholder]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 22\n      }, this)\n    }, List.lenght, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 13\n  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 15\n  }, this);\n};\n\n_s(List, \"JfKIXo3bZ3tq68OnP1yuYQzht1s=\");\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["React","useEffect","useState","DragDropContext","Droppable","Draggable","List","list","setList","Completed","setCompleted","handleDrag","result","source","destination","index","droppableId","reorder","sourceIndex","destinationIndex","removed","splice","updateCompleted","e","taskRef","doc","store","target","id","updateDoc","completed","checked","deleteTask","deleteDoc","droppableProvider","droppableProps","innerRef","map","task","toString","draggableProvider","draggableProps","dragHandleProps","placeholder","lenght"],"sources":["/Users/user/Downloads/react-todo-app-master/src/components/TodoList.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\nconst List = ({ list }) => {\n    const [List, setList] = useState(null);\n    const [Completed, setCompleted] = useState([]);\n    \n    useEffect(() => {\n        setList(list);\n    }, [list]);\n\n    const handleDrag = (result) => {\n        const { source, destination } = result;\n        if (!destination) return;\n        if (destination.index === source.index\n            && destination.droppableId === source.droppableId) return;\n        setList(List => reorder(List, source.index, destination.index));\n    }\n\n    const reorder = (list, sourceIndex, destinationIndex) => {\n        const result = [...list];\n        const [removed] = result.splice(sourceIndex, 1);\n        result.splice(destinationIndex, 0, removed);\n        return result;\n    }\n\n    const updateCompleted = async (e) => {\n        const taskRef = doc(store, \"tasks\", e.target.id);\n        await updateDoc(taskRef, {completed: e.target.checked});\n    }\n\n    const deleteTask = (id) => {\n        deleteDoc(doc(store, \"tasks\", id));\n    }\n\n    return (\n        List ?\n            <DragDropContext onDragEnd={(result => handleDrag(result))}>\n                <Droppable droppableId=\"task\" key={List.lenght}>\n                    {(droppableProvider) =>\n                    (<div\n                        {...droppableProvider.droppableProps}\n                        ref={droppableProvider.innerRef}\n                        className=\"list-task\">\n                        {\n                            List.map((task, id) => (\n                                <Draggable\n                                    draggableId={task.index.toString()}\n                                    index={id}\n                                    key={task.id}>\n                                    {(draggableProvider) => (\n                                        <div\n                                            {...draggableProvider.draggableProps}\n                                            ref={draggableProvider.innerRef}\n                                            {...draggableProvider.dragHandleProps}\n                                            className=\"task-item\">\n                                            <input\n                                                type=\"checkbox\"\n                                                id={task.id}\n                                                defaultChecked={task.completed}\n                                                onChange={updateCompleted} />\n                                            <label htmlFor={task.id}>\n                                                <BsCheck className=\"icon\" />\n                                                <span>{task.task}</span>\n                                            </label>\n                                            <VscChromeClose \n                                            className=\"icon-close\"\n                                            onClick={() => deleteTask(task.id)} />\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))\n                        }\n                        {droppableProvider.placeholder}\n                    </div>)\n                    }\n                </Droppable>\n            </DragDropContext>\n            : <span>Loading...</span>\n    )\n}\n\nexport default List;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}